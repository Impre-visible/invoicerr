name: Publish Docker Image to GitHub Container Registry

on:
  release:
    types: [ "created" ]
  push:
    branches:
      - test/workflow

jobs:
  build-amd64:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase repo name
        run: echo "REPO_NAME_LOWER=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set image tags and cache reference
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
            echo "IMAGE_TAG=${TAG}" >> $GITHUB_ENV
            echo "CACHE_REF=release" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF}" == refs/heads/test/workflow ]]; then
            echo "IMAGE_TAG=test-workflow" >> $GITHUB_ENV
            echo "CACHE_REF=test-workflow" >> $GITHUB_ENV
          else
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            SAFE_BRANCH_NAME=${BRANCH_NAME//\//-}
            echo "IMAGE_TAG=${SAFE_BRANCH_NAME}" >> $GITHUB_ENV
            echo "CACHE_REF=branch-${SAFE_BRANCH_NAME}" >> $GITHUB_ENV
          fi

      - name: Display cache configuration
        run: |
          echo "üöÄ Cache configuration:"
          echo "  Cache reference: ${{ env.CACHE_REF }}"
          echo "  Image tag: ${{ env.IMAGE_TAG }}"
          echo "  Git ref: ${GITHUB_REF}"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.REPO_NAME_LOWER }}:${{ env.IMAGE_TAG }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config-inline: |
            [worker.oci]
              max-parallelism = 8

      - name: Check existing Docker cache
        run: |
          echo "üîç Checking existing cache for scope: ${{ env.CACHE_REF }}"
          docker buildx du || true

      - name: Build and push AMD64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.REPO_NAME_LOWER }}:${{ env.IMAGE_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha,mode=max,scope=${{ env.CACHE_REF }}
          cache-to: type=gha,mode=max,scope=${{ env.CACHE_REF }}

  build-arm64:
    runs-on: ubuntu-22.04-arm
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ARM64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.REPO_NAME_LOWER }}:${{ env.IMAGE_TAG }}
          platforms: linux/arm64
          cache-from: type=gha,mode=max,scope=${{ env.CACHE_REF }}
          cache-to: type=gha,mode=max,scope=${{ env.CACHE_REF }}

  create-manifest:
    needs: [build-amd64, build-arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create multi-arch manifest
        run: |
          docker manifest create ghcr.io/${{ env.REPO_NAME_LOWER }}:${{ env.IMAGE_TAG }} \
            ghcr.io/${{ env.REPO_NAME_LOWER }}:${{ env.IMAGE_TAG }}
          docker manifest push ghcr.io/${{ env.REPO_NAME_LOWER }}:${{ env.IMAGE_TAG }}

      - name: Display build summary
        run: |
          echo "‚úÖ Build completed successfully!"
          echo "  Image pushed: ${{ env.REPO_NAME_LOWER }}:${{ env.IMAGE_TAG }}"
          echo "  Cache scope used: ${{ env.CACHE_REF }}"
