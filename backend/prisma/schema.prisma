datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String @id @default(cuid())
  firstname String
  lastname  String
  email     String @unique
  password  String
}

enum Currency {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BRL
  BSD
  BTC
  BTN
  BWP
  BYR
  BZD
  CAD
  CDF
  CHF
  CLF
  CLP
  CNY
  COP
  CRC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EEK
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GGP
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  IMP
  INR
  IQD
  IRR
  ISK
  JEP
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LTL
  LVL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRO
  MTL
  MUR
  MVR
  MWK
  MXN
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  STD
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  UYU
  UZS
  VEF
  VND
  VUV
  WST
  XAF
  XAG
  XAU
  XCD
  XDR
  XOF
  XPD
  XPF
  XPT
  YER
  ZAR
  ZMK
  ZMW
  ZWL
}

model Company {
  id          String    @id @default(cuid())
  name        String
  description String?
  language    String    @default("en")
  currency    Currency  @default(EUR)
  legalId     String? // Legal identification number (SIRET, EIN, etc.)
  foundedAt   DateTime? // Date when the company was founded
  VAT         String?
  address     String?
  postalCode  String?
  city        String?
  country     String?
  phone       String?
  email       String?
  Quote       Quote[]
  Invoice     Invoice[]
}

model Client {
  id               String    @id @default(cuid())
  name             String
  description      String?
  legalId          String? // Legal identification number (SIRET, EIN, etc.)
  VAT              String? // VAT number
  foundedAt        DateTime? // Date when the client company was founded
  contactFirstname String
  contactLastname  String
  contactEmail     String    @unique
  contactPhone     String?
  address          String?
  postalCode       String?
  city             String?
  country          String?
  isActive         Boolean   @default(true)
  Quote            Quote[]
  Invoice          Invoice[]
}

enum QuoteStatus {
  DRAFT
  SENT
  VIEWED
  SIGNED
  EXPIRED
}

model Quote {
  id         String      @id @default(uuid())
  number     String      @unique // Ex: "Q-2025-0001"
  title      String?
  client     Client      @relation(fields: [clientId], references: [id])
  clientId   String
  company    Company     @relation(fields: [companyId], references: [id])
  companyId  String
  items      QuoteItem[]
  status     QuoteStatus @default(DRAFT)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  validUntil DateTime?
  signedAt   DateTime?
  viewedAt   DateTime?
  signedBy   String?
  totalHT    Float
  totalVAT   Float
  totalTTC   Float
  isActive   Boolean     @default(true)
  Invoice    Invoice[]
  signatures Signature[]
}

model QuoteItem {
  id          String @id @default(uuid())
  quote       Quote  @relation(fields: [quoteId], references: [id])
  quoteId     String
  description String
  quantity    Int
  unitPrice   Float
  vatRate     Float // 20 for 20%
  order       Int // For sorting items in the quote pdf
}

enum InvoiceStatus {
  PAID
  UNPAID
  OVERDUE
  SENT
}

model Invoice {
  id            String        @id @default(uuid())
  number        String        @unique // Ex: "INV-2025-0001"
  quote         Quote?        @relation(fields: [quoteId], references: [id])
  quoteId       String?
  client        Client        @relation(fields: [clientId], references: [id]) // Client receiving the invoice
  clientId      String
  company       Company       @relation(fields: [companyId], references: [id]) // Company issuing the invoice
  companyId     String
  items         InvoiceItem[]
  status        InvoiceStatus @default(UNPAID)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  dueDate       DateTime
  paidAt        DateTime?
  paymentMethod String? // Ex: "Bank Transfer", "PayPal"
  notes         String?
  totalHT       Float
  totalVAT      Float
  totalTTC      Float
  isActive      Boolean       @default(true)
}

model InvoiceItem {
  id          String  @id @default(uuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId   String
  description String
  quantity    Int
  unitPrice   Float
  vatRate     Float // 20 for 20%
  order       Int
}

model Signature {
  id        String    @id @default(uuid())
  quoteId   String
  signedAt  DateTime?
  expiresAt DateTime?
  otpCode   String?
  otpUsed   Boolean   @default(false)
  quote     Quote     @relation(fields: [quoteId], references: [id])
  isActive  Boolean   @default(true)
}
