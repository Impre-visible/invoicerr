datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String @id @default(cuid())
  firstname String
  lastname  String
  email     String @unique
  password  String
}

model Company {
  id         String    @id @default(cuid())
  name       String
  language   String    @default("en")
  currency   String    @default("EUR")
  VAT        String?
  address    String?
  postalCode String?
  city       String?
  country    String?
  phone      String?
  email      String?
  Quote      Quote[]
  Invoice    Invoice[]
}

model Client {
  id               String    @id @default(cuid())
  name             String
  contactFirstname String
  contactLastname  String
  contactEmail     String    @unique
  contactPhone     String?
  address          String?
  postalCode       String?
  city             String?
  country          String?
  isActive         Boolean   @default(true)
  Quote            Quote[]
  Invoice          Invoice[]
}

enum QuoteStatus {
  DRAFT
  SENT
  VIEWED
  SIGNED
  EXPIRED
}

model Quote {
  id         String      @id @default(uuid())
  number     String      @unique // Ex: "Q-2025-0001"
  title      String?
  client     Client      @relation(fields: [clientId], references: [id])
  clientId   String
  company    Company     @relation(fields: [companyId], references: [id])
  companyId  String
  items      QuoteItem[]
  status     QuoteStatus @default(DRAFT)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  validUntil DateTime?
  signedAt   DateTime?
  viewedAt   DateTime?
  signedBy   String?
  totalHT    Float
  totalVAT   Float
  totalTTC   Float
  isActive   Boolean     @default(true)
  Invoice    Invoice[]
  signatures Signature[]
}

model QuoteItem {
  id          String @id @default(uuid())
  quote       Quote  @relation(fields: [quoteId], references: [id])
  quoteId     String
  description String
  quantity    Int
  unitPrice   Float
  vatRate     Float // 20 for 20%
  order       Int // For sorting items in the quote pdf
}

enum InvoiceStatus {
  PAID
  UNPAID
  OVERDUE
  SENT
}

model Invoice {
  id            String        @id @default(uuid())
  number        String        @unique // Ex: "INV-2025-0001"
  quote         Quote?        @relation(fields: [quoteId], references: [id])
  quoteId       String?
  client        Client        @relation(fields: [clientId], references: [id])
  clientId      String
  company       Company       @relation(fields: [companyId], references: [id])
  companyId     String
  items         InvoiceItem[]
  status        InvoiceStatus @default(UNPAID)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  dueDate       DateTime
  paidAt        DateTime?
  paymentMethod String? // Ex: "Bank Transfer", "PayPal"
  notes         String?
  totalHT       Float
  totalVAT      Float
  totalTTC      Float
  isActive      Boolean       @default(true)
}

model InvoiceItem {
  id          String  @id @default(uuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId   String
  description String
  quantity    Int
  unitPrice   Float
  vatRate     Float // 20 for 20%
  order       Int
}

model Signature {
  id        String    @id @default(uuid())
  quoteId   String
  signedAt  DateTime?
  expiresAt DateTime?
  otpCode   String?
  otpUsed   Boolean   @default(false)
  quote     Quote     @relation(fields: [quoteId], references: [id])
  isActive  Boolean   @default(true)
}
