datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  output          = "../generated/prisma"
  runtime         = "nodejs"
}

model User {
  id        String  @id @default(cuid())
  firstname String
  lastname  String
  email     String  @unique
  password  String? // If null, user is authenticated via OIDC
}

enum QuoteStatus {
  DRAFT
  SENT
  VIEWED
  SIGNED
  EXPIRED
}

model Quote {
  id             String      @id @default(uuid())
  number         Int         @default(autoincrement())
  rawNumber      String? // Raw number for custom formats
  title          String?
  client         Client      @relation(fields: [clientId], references: [id])
  clientId       String
  company        Company     @relation(fields: [companyId], references: [id])
  companyId      String
  items          QuoteItem[]
  status         QuoteStatus @default(DRAFT)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  validUntil     DateTime?
  signedAt       DateTime?
  viewedAt       DateTime?
  signedBy       String?
  totalHT        Float
  totalVAT       Float
  totalTTC       Float
  currency       Currency
  paymentMethod  String? // Ex: "Bank Transfer", "PayPal", "Cash"
  paymentDetails String? // Details for the payment method (e.g., bank account number)
  notes          String?     @default("")
  isActive       Boolean     @default(true)
  Invoice        Invoice[]
  signatures     Signature[]
}

model QuoteItem {
  id          String @id @default(uuid())
  quote       Quote  @relation(fields: [quoteId], references: [id])
  quoteId     String
  description String
  quantity    Int
  unitPrice   Float
  vatRate     Float // 20 for 20%
  order       Int // For sorting items in the quote pdf
}

enum InvoiceStatus {
  PAID
  UNPAID
  OVERDUE
  SENT
}

enum RecurrenceFrequency {
  WEEKLY // Every week
  BIWEEKLY // Every 2 weeks
  MONTHLY // Every month
  BIMONTHLY // Every 2 months
  QUARTERLY // Every 3 months
  QUADMONTHLY // Every 4 months
  SEMIANNUALLY // Every 6 months
  ANNUALLY // Every year
}

model RecurringInvoice {
  id                String                 @id @default(uuid())
  client            Client                 @relation(fields: [clientId], references: [id])
  clientId          String
  company           Company                @relation(fields: [companyId], references: [id])
  companyId         String
  items             RecurringInvoiceItem[]
  generatedInvoices Invoice[] // Relation inverse pour les factures générées
  paymentMethod     String? // Ex: "Bank Transfer", "PayPal", "Cash"
  paymentDetails    String? // Details for the payment method (e.g., bank account number)
  notes             String?                @default("")
  totalHT           Float
  totalVAT          Float
  totalTTC          Float
  currency          Currency
  frequency         RecurrenceFrequency // Simplified recurrence frequency
  count             Int? // Number of occurrences, null for infinite
  until             DateTime? // End date for the recurrence
  autoSend          Boolean                @default(false) // Auto-send generated invoices
  nextInvoiceDate   DateTime? // Date for the next invoice generation
  lastInvoiceDate   DateTime? // Date of the last generated invoice
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
}

model RecurringInvoiceItem {
  id                 String           @id @default(uuid())
  recurringInvoice   RecurringInvoice @relation(fields: [recurringInvoiceId], references: [id])
  recurringInvoiceId String
  description        String
  quantity           Int
  unitPrice          Float
  vatRate            Float // 20 for 20%
  order              Int
}

model Signature {
  id        String    @id @default(uuid())
  quoteId   String
  signedAt  DateTime?
  expiresAt DateTime?
  otpCode   String?
  otpUsed   Boolean   @default(false)
  quote     Quote     @relation(fields: [quoteId], references: [id])
  isActive  Boolean   @default(true)
}

model CurrencyConversion {
  id           String   @id @default(cuid())
  fromCurrency Currency
  toCurrency   Currency
  rate         Float
  expiresAt    DateTime

  @@unique([fromCurrency, toCurrency])
}
